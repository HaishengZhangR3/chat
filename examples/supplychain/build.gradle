buildscript {
    Properties constants = new Properties()

    ext {
        corda_release_group = 'net.corda'
        corda_release_version = '4.1'
        corda_gradle_plugins_version = '4.0.45'
        kotlin_version = '1.2.71'
        junit_version = '4.12'
        quasar_version = '0.7.10'
        log4j_version = '2.11.2'
        slf4j_version = '1.7.25'
        corda_platform_version = constants.getProperty("platformVersion")
        spring_boot_version = '2.0.2.RELEASE'
        spring_boot_gradle_plugin_version = '2.1.1.RELEASE'
        supply_chain_release_version = '1.0-RC01'
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url 'https://jitpack.io' }
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases' }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_gradle_plugin_version"
    }
}
apply plugin: 'kotlin'
apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'

cordapp {
    info {
        name "Supply Chain App"
        vendor "Corda Open Source"
        targetPlatformVersion 4
        minimumPlatformVersion 4
    }
}

sourceSets {
    supplychain {
        kotlin {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/main/kotlin')
        }
    }
}

configurations {
    supplychainCompile.extendsFrom testCompile
    supplychainRuntime.extendsFrom testRuntime
}
repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
}

dependencies {
    // Chat.
    cordapp project(":workflows")
    cordapp project(":contracts")

    // Corda.
    cordaCompile "$corda_release_group:corda-core:$corda_release_version"
    compile 'org.java-websocket:Java-WebSocket:1.4.0'

    // Kotlin.
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile "org.springframework.boot:spring-boot-starter-web:2.1.5.RELEASE"


    compile "javax.ws.rs:javax.ws.rs-api:2.0"


    // Corda integration dependencies.

    cordaCompile "$corda_release_group:corda-node:$corda_release_version"
    cordaCompile "$corda_release_group:corda-core:$corda_release_version"
    cordaCompile "$corda_release_group:corda-jackson:$corda_release_version"
    cordaCompile "$corda_release_group:corda-rpc:$corda_release_version"
    cordaCompile "$corda_release_group:corda-node-api:$corda_release_version"
    cordaCompile "$corda_release_group:corda-webserver-impl:$corda_release_version"
    cordaRuntime "$corda_release_group:corda:$corda_release_version"
    cordaRuntime "$corda_release_group:corda-webserver:$corda_release_version"

}


tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        languageVersion = "1.2"
        apiVersion = "1.2"
        jvmTarget = "1.8"
        javaParameters = true   // Useful for reflection.
    }
}

task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {

    nodeDefaults {
        cordapp project(":workflows")
        cordapp project(":contracts")
    }

    directory "./build/nodes"
    node {
        name "O=Notary,L=London,C=GB"
        notary = [validating: false]
        p2pPort 10000
        sshdPort 2222
        rpcSettings {
            address("localhost:10001")
            adminAddress("localhost:10002")
        }
    }
    node {
        name "O=Agent,L=London,C=GB"
        p2pPort 10004
        sshdPort 2223
        webPort 50000
        rpcSettings {
            address("localhost:10005")
            adminAddress("localhost:10006")
        }
        rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=FundManager1,L=New York,C=US"
        p2pPort 10008
        sshdPort 2224
        webPort 50001
        rpcSettings {
            address("localhost:10009")
            adminAddress("localhost:10010")
        }
        rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=FundManager2,L=Paris,C=FR"
        p2pPort 10012
        sshdPort 2224
        webPort 50002
        rpcSettings {
            address("localhost:10013")
            adminAddress("localhost:10014")
        }
        rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=Administrator1,L=Paris,C=FR"
        p2pPort 10020
        sshdPort 2225
        webPort 50003
        rpcSettings {
            address("localhost:10021")
            adminAddress("localhost:10022")
        }
        rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
}

task supplyChain(type: Test, dependsOn: []) {
    testClassesDirs = sourceSets.supplychain.output.classesDirs
    classpath = sourceSets.supplychain.runtimeClasspath
}

jar {
    baseName = "supplychain-xx"
    version = "1.0.0.0"
}
