buildscript {
    Properties constants = new Properties()

    ext {
        corda_release_group = 'net.corda'
        corda_release_version = '4.1'
        corda_gradle_plugins_version = '4.0.45'
        kotlin_version = '1.2.71'
        junit_version = '4.12'
        quasar_version = '0.7.10'
        log4j_version = '2.11.2'
        slf4j_version = '1.7.25'
        corda_platform_version = constants.getProperty("platformVersion")
        spring_boot_version = '2.0.2.RELEASE'
        spring_boot_gradle_plugin_version = '2.1.1.RELEASE'
        supply_chain_release_version = '1.0-RC01'
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url 'https://jitpack.io' }
		maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases' }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_gradle_plugin_version"
    }
}

apply plugin: 'kotlin'
apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'org.springframework.boot'
apply plugin: 'net.corda.plugins.quasar-utils'

configurations {
    compile {
        // We want to use SLF4J's version of these bindings: jcl-over-slf4j
        // Remove any transitive dependency on Apache's version.
        exclude group: 'commons-logging', module: 'commons-logging'
    }
}

dependencies {
    // Chat.
    cordapp project(":workflows")
    cordapp project(":contracts")

    // kotlin
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testCompile "junit:junit:$junit_version"

    // Corda dependencies.
    cordaCompile "$corda_release_group:corda:$corda_release_version"
    cordaCompile "$corda_release_group:corda-jackson:$corda_release_version"
    cordaCompile "$corda_release_group:corda-core:$corda_release_version"
    cordaCompile "$corda_release_group:corda-rpc:$corda_release_version"
    cordaCompile "$corda_release_group:corda-node-api:$corda_release_version"
    compile("org.springframework.boot:spring-boot-starter-websocket:$spring_boot_version") {
        exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
    }
    compile "org.apache.logging.log4j:log4j-slf4j-impl:$log4j_version"
    compile "org.apache.logging.log4j:log4j-web:$log4j_version"
    runtime "$corda_release_group:corda:$corda_release_version"

    // web server socket
    compile 'org.java-websocket:Java-WebSocket:1.4.0'
    compile "javax.ws.rs:javax.ws.rs-api:2.0"

}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
    kotlinOptions {
        languageVersion = "1.2"
        apiVersion = "1.2"
        jvmTarget = "1.8"
        javaParameters = true   // Useful for reflection.
    }
}

task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {
    nodeDefaults {
        projectCordapp {
            deploy = true
        }
    }
    signing {
        enabled false
    }
    node {
        name "O=PartyA,L=London,C=GB"
        p2pPort 10005
        rpcSettings {
            address("localhost:10006")
            adminAddress("localhost:10046")
        }
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
        extraConfig = [
                custom: [
                        jvmArgs: ["-Xmx4g", "-XX:+UseG1GC"]
                ]
        ]
    }
}

task runPartyAServer(type: JavaExec, dependsOn: jar) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'net.corda.server.ServerKt'
}

bootJar {
    baseName = "letter-of-credit-webserver"
    version = "${supply_chain_release_version}"
}


sourceSets {
    loc {
        kotlin {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/main/kotlin')
        }
    }
}


task locwebserver(type: Test, dependsOn: []) {
    testClassesDirs = sourceSets.loc.output.classesDirs
    classpath = sourceSets.loc.runtimeClasspath
}
